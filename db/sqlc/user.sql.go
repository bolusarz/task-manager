// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (first_name, last_name, email, password_hash, profile_picture_url) values ($1, $2, $3, $4, $5) returning id, first_name, last_name, email, is_email_verified, password_hash, profile_picture_url, created_at
`

type CreateUserParams struct {
	FirstName         string `json:"firstName"`
	LastName          string `json:"lastName"`
	Email             string `json:"email"`
	PasswordHash      string `json:"passwordHash"`
	ProfilePictureUrl string `json:"profilePictureUrl"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordHash,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, first_name, last_name, email, is_email_verified, password_hash, profile_picture_url, created_at from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordHash,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, first_name, last_name, email, is_email_verified, password_hash, profile_picture_url, created_at from  users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordHash,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
	set first_name = $2,
		last_name = $3,
		email = $4,
		profile_picture_url = $5,
        is_email_verified = $6
where id = $1
returning id, first_name, last_name, email, is_email_verified, password_hash, profile_picture_url, created_at
`

type UpdateUserParams struct {
	ID                int32  `json:"id"`
	FirstName         string `json:"firstName"`
	LastName          string `json:"lastName"`
	Email             string `json:"email"`
	ProfilePictureUrl string `json:"profilePictureUrl"`
	IsEmailVerified   bool   `json:"isEmailVerified"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ProfilePictureUrl,
		arg.IsEmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordHash,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
update users 
	set password_hash = $2
where id = $1
`

type UpdateUserPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"passwordHash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}
